{"id":1680,"parentExerciseId":null,"name":"Introduction","slug":"recursion__introduction","sequenceNum":2000,"reviewType":"peer","solution":null,"content":"# Recursions\r\n\r\n## Prerequitisites\r\n\r\nIss course ko karne ke liye aapke paas inn concepts ki solid understanding honi chahiye:\r\n\r\n1 - Functions\r\n2 - Loops, If-Else Conditions, Operators, Booleans, etc.\r\n\r\nYeh image dekho\r\n\r\n![Recursion](https://s3.ap-south-1.amazonaws.com/saralng/Understanding__programming__through__recursion/2000/256ov0.sierpinski_triangle.png)\r\n\r\nIss image mei triangle ke andar triangle ke andar triangle hai... Yeh ek tarah se triangles ki `recursion` hai. Saral shabdo mei agar aap kisi cheez ko, ussi hi cheez ke terms mei express kar sakte hai toh usse recursion kehte hai. Jaise ki yeh numbers dekho :\r\n\r\n1, 2, 4, 8, 16, 32, 64, 128, 256\r\n\r\nAb yeh code dekho\r\n\r\n```python\r\ndef twopowers(number):\r\n    if number==1:\r\n        return 1\r\n    return 2 * twopowers(number-1)\r\n\r\nindex=1\r\nwhile(index<10):\r\n    print(twopowers(index))\r\n    index+=1\r\n```\r\n\r\nIss code mei `twopowers` function mei `twopowers` function ko hi call kar rahe hai. Ek tarah se yeh function apni value nikalne ke liye, khud ko hi call kar raha hai. \r\n\r\nKyuki function khud ko hi baar baar call kar raha hai, kabhi toh function ko value return karni hogi. Isliye hum `base case` add karte hai. Jaise humne iss program mei likha ki agar `number` ki value `1` hai toh, `1` return kar do.\r\n\r\nToh ab program mei jab hum `twopowers(5)` call karte hai, toh woh `2 * twopowers(4)` return kar deta hai.\r\nPar iss expression ko calculate karne ke liye `twopowers(4)` ki value chahiye, isliye woh uss value ka wait karta hai.\r\n\r\nToh ab program mei jab hum `twopowers(4)` call karte hai, toh woh `2 * twopowers(3)` return kar deta hai.\r\nPar iss expression ko calculate karne ke liye `twopowers(3)` ki value chahiye, isliye woh uss value ka wait karta hai.\r\n\r\nToh ab program mei jab hum `twopowers(3)` call karte hai, toh woh `2 * twopowers(2)` return kar deta hai.\r\nPar iss expression ko calculate karne ke liye `twopowers(2)` ki value chahiye, isliye woh uss value ka wait karta hai.\r\n\r\nToh ab program mei jab hum `twopowers(2)` call karte hai, toh woh `2 * twopowers(1)` return kar deta hai.\r\nPar iss expression ko calculate karne ke liye `twopowers(1)` ki value chahiye, isliye woh uss value ka wait karta hai.\r\n\r\nToh ab program mei jab hum `twopowers(1)` call karte hai, toh woh `1` return kar deta hai. **BASE CASE CONDITION**\r\n\r\nAb kyuki `twopowers(1)` ki value pata hai. Toh `2 * twopowers(1)` ki value calculate ho kar 2 * 1 = `2` pata chal jaati hai. Yeh `twopowers(2)` ki value hai.\r\n\r\nAb kyuki `twopowers(2)` ki value pata hai. Toh `2 * twopowers(2)` ki value calculate ho kar 2 * 2 = `4` pata chal jaati hai. Yeh `twopowers(3)` ki value hai.\r\n\r\nAb kyuki `twopowers(3)` ki value pata hai. Toh `2 * twopowers(2)` ki value calculate ho kar 2 * 4 = `8` pata chal jaati hai. Yeh `twopowers(4)` ki value hai.\r\n\r\nAb kyuki `twopowers(4)` ki value pata hai. Toh `2 * twopowers(3)` ki value calculate ho kar 2 * 8 = `16` pata chal jaati hai. Yeh `twopowers(5)` ki value hai.\r\n\r\nIsliye `twopowers(5)` ka answer 16 hai.\r\n\r\nKya aap isi tarah sochte hue, agli exercise mei diye hue kuch patterns ka solution likh sakte hai?","submissionType":null,"githubLink":"https://github.com/navgurukul/newton/tree/master/recursion/introduction.md"}