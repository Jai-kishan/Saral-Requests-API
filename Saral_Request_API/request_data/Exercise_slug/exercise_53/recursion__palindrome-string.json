{"id":1689,"parentExerciseId":null,"name":"Palindrome String","slug":"recursion__palindrome-string","sequenceNum":6000,"reviewType":"peer","solution":null,"content":"```ngMeta\r\nsubmissionType: url\r\n```\r\n## Palindrome\r\nPalindrome woh string ya number hota hai, jo left se right aur right se left same hota hai. Jaise `nayan` string. Aap isse left se dekhoge toh bhi `nayan` hai, aur right se dekhoge toh bhi `nayan` hai.\r\n\r\n`naina` jaise palindrome nahi hai. Left se yeh `naina` hai, par right se `anian` hai. Aur dono alag alag hai.\r\n\r\nAapko ek function likhna hai recursion use kar kar jo dekhega ki given `string` `palindrome` hai ya nahi.\r\n\r\n## Hint\r\n- Agar pehla aur aakhiri character list mei alag hoga, toh list palindrome nahi hai.\r\n- Agar pehla aur aakhiri character list mei same hai, toh list palindrome hai agar bacchi hui list (list mei agar pehla aur aakhiri element hata do toh) palindrome hai.\r\n- Agar list mei ek character hai, toh woh hamesha palindrome hoga.\r\n- Agar list mei do character hai, aur woh dono same hai toh palindrome hoga, else palindrome nahi hoga.\r\n\r\n## Solution\r\n```python\r\ndef ifPalindrome(string):\r\n    if string == \"\":  # BASE CASE CONDITION\r\n        return True\r\n    elif len(string) == 1:  # BASE CASE CONDITION\r\n        return True\r\n    elif string[0] == string[len(string)-1]:  # RECURSION\r\n        return ifPalindrome(string[1:][:-1])\r\n    else:\r\n        return False\r\n```\r\n","submissionType":"url","githubLink":"https://github.com/navgurukul/newton/tree/master/recursion/palindrome-string.md"}